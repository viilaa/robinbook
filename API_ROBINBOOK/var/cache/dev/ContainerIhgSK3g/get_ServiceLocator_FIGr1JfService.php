<?php

namespace ContainerIhgSK3g;


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_FIGr1JfService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.fIGr1Jf' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.fIGr1Jf'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'authenticator' => ['privates', '.errored.y.l0vFp', NULL, 'Cannot determine controller argument for "App\\Controller\\RegisterController::register()": the $authenticator argument is type-hinted with the non-existent class or interface: "App\\Security\\LoginAuthenticator".'],
            'guardHandler' => ['privates', '.errored.07ikgan', NULL, 'Cannot determine controller argument for "App\\Controller\\RegisterController::register()": the $guardHandler argument is type-hinted with the non-existent class or interface: "Symfony\\Component\\Security\\Guard\\GuardAuthenticatorHandler".'],
            'passwordEncoder' => ['privates', '.errored.Ji47_zI', NULL, 'Cannot determine controller argument for "App\\Controller\\RegisterController::register()": the $passwordEncoder argument is type-hinted with the non-existent class or interface: "Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface".'],
            'request' => ['privates', '.errored.2yjOdw4', NULL, 'Cannot determine controller argument for "App\\Controller\\RegisterController::register()": the $request argument is type-hinted with the non-existent class or interface: "App\\Controller\\Request". Did you forget to add a use statement?'],
        ], [
            'authenticator' => '?',
            'guardHandler' => '?',
            'passwordEncoder' => '?',
            'request' => '?',
        ]);
    }
}
